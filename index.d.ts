type ImageboardId = '4chan' | '2ch' | '8ch' | 'kohlchan' | 'arisuchan' | 'endchan' | 'lainchan';

type ImageboardEngine = '4chan' | 'vichan' | 'OpenIB' | 'lynxchan' | 'makaba';

interface ImageboardConfigBoard {
	id: string;
	title: string;
	category?: string;
}

interface ImageboardConfigApi {
	// "Get boards list" API URL.
	// `api.getBoards` is required if there's no `boards` parameter.
	getBoards?: string;

	// "Find boards by a query" API URL.
	findBoards?: string;

	// "Get threads list" API URL template.
	getThreads: string;

	// "Get threads list including their latest comments" API URL template.
	getThreadsWithLatestComments?: string;

	// "Get threads list (first page) including their latest comments" API URL template.
	getThreadsWithLatestCommentsFirstPage?: string;

	// "Get threads list (N-th page) including their latest comments" API URL template.
	getThreadsWithLatestCommentsPage?: string;

	// "Get threads stats" API URL template.
	getThreadsStats?: string;

	// "Get thread comments" API URL template.
	getThread: string;

	// "Get archived thread comments" API URL template.
	getArchivedThread?: string;
}

interface ImageboardConfig {
	id: string;
	domain: string;
	engine: ImageboardEngine;
	boards?: ImageboardConfigBoard[];
	api: ImageboardConfigApi;
  // A template for a board URL.
	boardUrl: string;
  // A template for a thread URL.
	threadUrl: string;
  // A template for a comment URL.
	commentUrl: string;
  // Attachment URL template.
	attachmentUrl?: string;
  // Attachment thumbnail URL pattern.
	attachmentThumbnailUrl?: string;
  // Non-picture and non-video attachment URL pattern.
  fileAttachmentUrl?: string;
  // (required by `8ch` engine (8kun.top)`)
  attachmentUrlFpath?: string;
  // (required by `8ch` engine (8kun.top)`)
  attachmentThumbnailUrlFpath?: string;
  defaultAuthorName?: string | Record<string, string>;
  // (required by `lynxchan` engine)
  thumbnailSize?: number;
}

type HttpRequestMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';

interface HttpRequestOptions {
	body?: string;
	headers?: Record<string, string>;
}

type HttpRequestResult = string;

interface HttpRequestResultWithRedirectToUrl {
	response: string;
	url: string;
}

interface Messages {
  comment?: {
    default?: string;
    deleted?: string;
    external?: string;
  };
  thread?: {
    default?: string;
  };
  // https://gitlab.com/catamphetamine/social-components/-/tree/master#messages
  textContent?: {
		block?: {
			audio?: string;
			video?: string;
			picture?: string;
			attachment?: string;
			inline?: {
				attachment?: string;
				link?: string;
				linkTo?: string;
			}
		};
  };
}

interface ImageboardOptionsOverridable {
	parseContent?: boolean;
	addParseContent?: boolean;
	commentLengthLimit?: number;
}

interface ImageboardOptions extends ImageboardOptionsOverridable {
	request: (method: HttpRequestMethod, url: string, parameters: HttpRequestParameters) => Promise<HttpRequestResult | HttpRequestResultWithRedirectToUrl>;
	commentUrl?: string;
	threadUrl?: string;
	messages?: Messages;
	useRelativeUrls?: boolean;
	expandReplies?: boolean;
	getPostLinkProperties?: (comment?: Comment) => object;
	getPostLinkText?: (postLink: object) => string?;
}

type BoardId = string;
type ThreadId = number;
type CommentId = number;

export interface Board {
  id: BoardId;
  title: string;
  category?: string;
  description?: string;
  notSafeForWork?: boolean;
  bumpLimit?: number;
  commentsPerHour?: number;
  maxAttachmentsInThread?: number;
  maxCommentLength?: number;
  maxAttachmentSize?: number;
  maxVideoAttachmentSize?: number;
  maxVideoAttachmentDuration?: number;
  maxAttachmentsSize?: number;
  createThreadCooldown?: number;
  postCommentCooldown?: number;
  attachFileCooldown?: number;
  features?: {
    sage?: boolean;
    name?: boolean;
  };
}

interface BoardBadge {
	id: string;
	title: string;
}

export interface Thread {
  id: ThreadId;
  boardId: BoardId;
  title?: string;
  autogeneratedTitle?: string;
  createdAt?: Date;
  updatedAt?: Date;
  commentsCount: number;
  attachmentsCount: number;
  commentAttachmentsCount: number;
  uniquePostersCount?: number;
  comments: Comment[];
  onTop?: boolean;
  onTopOrder?: number;
  locked?: boolean;
  trimming?: boolean;
  archived?: boolean;
  archivedAt?: Date;
  bumpLimitReached?: boolean;
  attachmentLimitReached?: boolean;
  customSpoilerId?: number;
  board?: {
    title?: string;
    bumpLimit?: number;
    maxCommentLength?: number;
    maxAttachmentsSize?: number;
    maxAttachmentSize?: number;
    maxAttachments?: number;
    features?: {
      subject?: boolean;
      attachments?: boolean;
      tags?: boolean;
      votes?: boolean;
    };
    badges?: BoardBadge[];
  }
}

type GetCommentById = (id: CommentId) => Comment | undefined;

type RawCommentContent = string;

// https://github.com/catamphetamine/social-components/blob/master/docs/Content.md

interface InlineElementStyledText {
  type: 'text';
  style: 'bold' | 'italic' | 'underlined' | 'strikethrough' | 'subscript' | 'superscript';
  content: InlineContent;
}

type InlineElementNewLine = '\n';

interface InlineElementEmoji {
  type: 'emoji';
  name: string;
  url: string;
}

interface InlineElementQuote {
  type: 'quote';
  content: InlineContent;
  kind?: string;
  block?: boolean;
}

interface InlineElementSpoiler {
  type: 'spoiler';
  content: InlineContent;
  censored?: boolean;
}

interface InlineElementLink {
  type: 'link';
  url: string;
  service?: string;
  attachment?: Attachment;
  content: InlineContent;
  contentGenerated?: boolean;
}

interface InlineElementPostLink {
  type: 'post-link';
  url: string;
  boardId: BoardId;
  threadId: ThreadId;
  postId: CommentId;
  content: InlineContent;
}

interface InlineElementCode {
  type: 'code';
  language?: string;
  content: InlineContent;
}

interface InlineElementReadMore {
	type: 'read-more';
}

type InlineElement =
	string |
	InlineElementStyledText |
	InlineElementNewLine |
	InlineElementEmoji |
	InlineElementQuote |
	InlineElementSpoiler |
	InlineElementLink |
	InlineElementPostLink |
	InlineElementCode |
	InlineElementReadMore;

type InlineContent = string | InlineElement[];

interface BlockElementSubheading {
  type: 'heading';
  content: InlineContent;
}

interface BlockElementList {
  type: 'list';
  items: InlineContent[];
}

interface BlockElementCode {
  type: 'code';
  language?: string;
  content: InlineContent;
}

interface BlockElementQuote {
  type: 'quote';
  url?: string;
  source?: string;
  content: InlineContent;
}

interface BlockElementAttachmentReference {
  type: 'attachment';
  attachmentId: number;
  expand?: boolean;
  link?: string;
}

interface BlockElementAttachment {
  type: 'attachment';
  attachment: Attachment;
  expand?: boolean;
  link?: string;
}

interface BlockElementReadMore {
	type: 'read-more';
}

type BlockElement =
	BlockElementSubheading |
	BlockElementList |
	BlockElementCode |
	BlockElementQuote |
	BlockElementAttachmentReference |
	BlockElementAttachment |
	BlockElementReadMore;

type ContentBlock = BlockElement | InlineContent;

// In this library specifically, `Content` is always an array of content blocks.
// type Content = string | ContentBlock[];
type Content = ContentBlock[];

type ParsedCommentContent = Content;

export interface Comment {
  id: CommentId;
  title?: string;
  createdAt: Date;
  updatedAt?: Date;

  authorIsThreadAuthor?: boolean;
  authorId?: string;
  authorIdColor?: string;
  authorNameIsId?: boolean;
  authorName?: string;
  authorEmail?: string;
  authorTripCode?: string;
  authorCountry?: string;
  authorBadgeUrl?: string;
  authorBadgeName?: string;
  authorRole?: string;
  authorRoleScope?: string;
  authorBan?: boolean;
  authorBanReason?: string;
  authorVerified?: boolean;

  sage?: boolean;
  upvotes?: number;
  downvotes?: number;
  content?: RawCommentContent | ParsedCommentContent;
  contentPreview?: ParsedCommentContent;
  inReplyTo?: number[] | Comment[];
  inReplyToRemoved?: number[];
  replies?: number[] | Comment[];
  attachments?: Attachment[];

  parseContent?: (options?: { getCommentById: GetCommentById }) => void;
  hasContentBeenParsed?: () => boolean;
  onContentChange?: (options?: { getCommentById: GetCommentById }) => void;
}

interface PictureSize {
  type: string;
  width: number;
  height: number;
  url: string;
}

interface Picture {
  type: string;
  width: number;
  height: number;
  size?: number;
  url: string;
  title?: string;
  transparentBackground?: boolean;
  sizes?: PictureSize[]
}

interface PictureAttachment {
  type: 'picture';
  spoiler?: boolean;
  picture: Picture;
}

interface Video {
  type?: string;
  url?: string;
  provider?: 'youtube' | 'vimeo';
  id?: string;
  width?: number;
  height?: number;
  size?: number;
  duration?: number;
  picture: Picture;
}

interface VideoAttachment {
  type: 'video';
  spoiler?: boolean;
  video: Video;
}

interface Audio {
  type?: string;
  url?: string;
  provider?: string;
  id?: string;
  bitrate?: number;
  date?: Date;
  author?: string;
  title?: string;
}

interface AudioAttachment {
  type: 'audio';
  audio: Audio;
}

interface File {
  type: string;
  title?: string;
  ext?: string;
  size?: number;
  url: string;
  picture?: Picture;
}

interface FileAttachment {
  type: 'file';
  file: File;
}

interface Social {
  provider: 'twitter' | 'instagram';
  id: string;
  url?: string;
  date?: Date;
  author?: {
    id: string;
    name?: string;
    url?: string;
    picture?: Picture;
  };
  content?: string;
  attachments?: Attachment[];
}

interface SocialAttachment {
	type: 'social';
	social: Social;
}

// https://github.com/catamphetamine/social-components/blob/master/docs/Attachments.md
export type Attachment =
	PictureAttachment |
	VideoAttachment |
	AudioAttachment |
	FileAttachment |
	SocialAttachment;

interface GetThreadsOptions extends ImageboardOptionsOverridable {
	withLatestComments?: boolean;
	maxLatestCommentsPages?: number;
	latestCommentLengthLimit?: number;
	sortByRating?: boolean;
}

interface GetThreadOptions extends ImageboardOptionsOverridable {
	archived?: boolean;
	afterCommentId?: CommentId;
	afterCommentsCount?: number;
}

export interface Imageboard {
	getBoards: () => Promise<Board[]>;
	getAllBoards: () => Promise<Board[]>;
	hasMoreBoards: () => boolean;
	findBoards: (query: string) => Promise<Board[]>;
	canSearchForBoards: () => boolean;
	getThreads: (parameters: { boardId: BoardId }, options?: GetThreadsOptions) => Promise<Thread[]>;
	getThread: (parameters: { boardId: BoardId, threadId: ThreadId }, options?: GetThreadOptions) => Promise<Thread>;
	vote: (parameters: { up: boolean, boardId: BoardId, threadId: ThreadId, commentId: CommentId }) => Promise<boolean>;
}

export function getConfig(imageboardId: ImageboardId): ImageboardConfig;

export function getCommentText(comment: Comment, options?: {
	messages?: Messages;
	skipPostQuoteBlocks?: boolean;
	skipGeneratedPostQuoteBlocks?: boolean;
}): string | undefined;

function imageboard(imageboardIdOrConfig: ImageboardId | ImageboardConfig, options: ImageboardOptions): Imageboard;

export default imageboard;