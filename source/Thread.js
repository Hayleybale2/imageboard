import createByIdIndex from './utility/createByIdIndex'
import getInReplyToPostIds from './getInReplyToPostIds'
import setReplies from './setReplies'
import generateQuotes from './generateQuotes'
import generatePreview from './generatePreview'
import generateThreadTitle from './generateThreadTitle'

export default function Thread(thread, comments, {
	boardId,
	messages,
	censoredWords,
	commentLengthLimit,
	commentUrlParser,
	expandReplies,
	parseContent
}, board) {
	thread.boardId = boardId
	if (board) {
		thread.board = board
	}
	// Remove `false` properties.
	if (!thread.isSticky) {
		delete thread.isSticky
	}
	if (!thread.isLocked) {
		delete thread.isLocked
	}
	if (!thread.isRolling) {
		delete thread.isRolling
	}
	if (board && board.bumpLimit && thread.commentsCount >= board.bumpLimit) {
		thread.isBumpLimitReached = true
	}
	// On `8ch.net` "rolling" "sticky" threads are
	// also marked as `bumplimit: 1` when their
	// technical "bump limit" is technically "reached".
	// By definition, "rolling" and "sticky" threads don't expire.
	if (thread.isSticky || thread.isRolling) {
		if (thread.isBumpLimitReached) {
			thread.isBumpLimitReached = false
		}
	}
	// Set `.inReplyTo` array for each comment.
	// `.inReplyTo` array contains comment IDs.
	for (const comment of comments) {
		const inReplyTo = getInReplyToPostIds(comment, {
			boardId,
			threadId: thread.id,
			commentUrlParser,
			parseContent
		})
		if (inReplyTo) {
			comment.inReplyTo = inReplyTo
		}
	}
	// Set `.replies` array for each comment
	// based on the `.inReplyTo` array.
	// `.replies` array contains comment IDs.
	// Can only come after `.inReplyTo` arrays are set on comments.
	setReplies(comments)
	// `Array.find()` is slow for doing it every time.
	// A "get post by id" index is much faster.
	const getCommentById = createByIdIndex(comments)
	for (const comment of comments) {
		// If the comment has any content and `parseContent` is not `false`
		// (in which case `comment.content` has already been parsed)
		// then create autogenerated content (such as "in reply to" quotes) right now.
		// Otherwise, defer until `post.parseContent()` is called.
		if (comment.content && parseContent !== false) {
			// Set "Deleted message" for links to deleted comments.
			// Set "Hidden message" for links to hidden comments.
			// Autogenerate "in reply to" quotes for links to all other comments.
			generateQuotes(comment.content, {
				// `comment` is only used for generating post preview.
				comment,
				getCommentById,
				threadId: thread.id,
				messages,
				isFirstRun: true
			})
			if (commentLengthLimit) {
				generatePreview(comment, commentLengthLimit)
			}
		}
	}
	if (expandReplies) {
		// Expand `replies` array from a list of reply `id`s to a list of the reply objects.
		for (const comment of comments) {
			if (comment.replies) {
				comment.replies = comment.replies.map(getCommentById)
			}
		}
	}
	// The date on which the thread was created.
	// All chans except `lynxchan` have this.
	// `lynxchan` doesn't have it which is a bug
	// but seems like they don't want to fix it.
	if (comments[0].createdAt) {
		thread.createdAt = comments[0].createdAt
	}
	thread.comments = comments
	// If `thread.title` is missing then either copy it
	// from the first comment's `title` or attempt to
	// autogenerate it from the first comment's `content`.
	// Also applies censorship rules to `thread.title`
	// if it's either already present or autogenerated.
	generateThreadTitle(thread, {
		censoredWords,
		messages,
		parseContent
	})
	return thread
}