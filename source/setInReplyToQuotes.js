import { forEachFollowingQuote } from 'social-components/commonjs/utility/post/combineQuotes'
import generatePostQuote from 'social-components/commonjs/utility/post/generatePostQuote'

import { getPostLinkDefaultText } from './setPostLinksDefaultText'

/**
 * Adds "in-reply-to" quotes.
 * Has some CPU usage.
 * @param {any} content — Comment `content`. Must be a root-level `content`.
 * @param {function} options.getCommentById — Retuns comment by id.
 * @param {object} [options.messages]
 * @param {boolean} [options.generateQuotes] — Is `true` by default. Passing `generateQoutes: false` could seem like not making any sense, but it is used in `captchan` when parsing comments not starting from the first one: in that case it only parses a few of the "previous" comments which are then used in autogenerated quotes for the comments being shown; to further reduce the parsing time, autogenerated quotes for those few "previous" comments aren't generated by passing `generateQuotes: false`, further reducing the overall parsing time by a little bit.
 * @param {number} [options.generatedQuoteMaxLength] — Is `180` by default.
 * @param {number} [options.generatedQuoteFitFactor] — Is `1.35` by default.
 * @param {object} contentParent — Shouldn't be passed. Is only passed internally when recursing. The parent block of `content` block.
 * @param {boolean} isLastInParagraph — If the `content` block is the last one in `contentParent`.
 * @return {boolean} [contentDidChange] — Returns `true` if `content` did change (either as a result of setting an in-reply-to quote or as a result of setting "deleted post"/"hidden post" flag).
 */
export default function setInReplyToQuotes(
	content,
	options,
	contentParent,
	isFirstInParagraph = true,
	isLastInParagraph = true
) {
	const {
		getCommentById,
		generateQuotes: shouldGenerateQuotes
	} = options
	if (Array.isArray(content)) {
		let i = 0
		let contentDidChange = false
		while (i < content.length) {
			const part = content[i]
			const partsCount = content.length
			if (setInReplyToQuotes(
				part,
				options,
				content,
				contentParent ? (isFirstInParagraph ? i === 0 : false) : true,
				contentParent ? (isLastInParagraph && i === content.length - 1) : true
			)) {
				contentDidChange = true
			}
			// Check if some elements have been removed
			// (or maybe hypothetically added)
			// in which case adjust the cycle index.
			if (content.length !== partsCount) {
				i += content.length - partsCount
			}
			i++
		}
		return contentDidChange
	}
	// Post content can be empty.
	// Or maybe even post part's content.
	// Like `{ type: 'attachment', attachmentId: 1 }`.
	if (!content) {
		return
	}
	if (typeof content === 'string') {
		return
	}
	// Only set quotes for "standalone" `post-link`s.
	// (`post-link`s being the only content on its line)
	const index = contentParent.indexOf(content)
	const isTheOnlyOneOnLine =
		(isFirstInParagraph || endsWithNewLineAndOptionalWhiteSpace(contentParent, index, false)) &&
		(isLastInParagraph || endsWithNewLineAndOptionalWhiteSpace(contentParent, index, true))
	if (!isTheOnlyOneOnLine) {
		if (content.type === 'post-link') {
			// Doesn't do `content.content.toLowerCase()`
			// because, for example, in German all nouns
			// are supposed to start with a capital letter.
			// `setInReplyToQuotes()` can be called multiple times
			// for the same comment (for example, when its parent
			// comment's `content` is updated).
			content.content = '[' + getPostLinkDefaultText(content, options.messages) + ']'
		}
		return
	}
	if (content.type === 'post-link') {
		// Autogenerated parent post quotes are updated after YouTube videos have been loaded.
		// If non-autogenerated post quote for this post link has already been set then skip it.
		if (Array.isArray(content.content) && content.content[0].type === 'quote') {
			if (!content.content[0].generated) {
				return
			}
		}
		// If the quoted post has been deleted, is hidden or is from another thread.
		if (content.postWasDeleted || content.postIsHidden || content.postIsExternal) {
			// If it's the first run then transform the text content to a quote.
			if (typeof content.content === 'string') {
				content.content = [{
					type: 'quote',
					generated: true,
					content: content.content
				}]
				// Content did change.
				return true
			}
			// Otherwise, skip it.
			return
		}
		// Get the post being quoted.
		// `Array.find()` is slow for doing it every time.
		// A "postsById" index is much faster.
		const quotedPost = getCommentById(content.postId)
		// This shouldn't happen because `classifyPostLinks()`
		// is supposed to be run before this function
		// setting `postWasDeleted: true` flag for missing posts.
		if (!quotedPost) {
			console.error(`Post #${content.postId} not found`)
			return
		}
		// Passing `generateQuotes: false` could seem like not making any sense,
		// but it is used in `captchan` when parsing comments not starting from the first one:
		// when "Show previous" button is shown and comments are output from after the "latest read" one.
		// In those cases, when the first shown comment quotes an earlier comment
		// having a manually written quote for a post link, such manually written quotes
		// should be moved inside that `post-link`'s `content`.
		// Example: #1235 ">>1234 \n >Quote \n Text" (hidden), #1236 ">>1235 \n Second text" (shown).
		// Without calling `setInReplyToQuotes({ generateQuotes: false })` it would be:
		// #1236 ">>««Quote» \n Text» \n Second text".
		// With calling `setInReplyToQuotes({ generateQuotes: false })` it would be:
		// #1236 ">>«Text» \n Second text".
		const generateQuotes = shouldGenerateQuotes === false ? false : true
		// If the quoted post link is the last content element in the post then
		// don't perform further checks and generate the quote for the quoted post.
		if (isLastInParagraph) {
			if (generateQuotes) {
				setPostLinkQuote(content, quotedPost, options)
			}
			return true
		}
		const quotes = []
		// See if there's already an existing post quote for this post link.
		// (composed manually by post author)
		const startFromIndex = index + 2
		const quotesCount = forEachFollowingQuote(contentParent, startFromIndex, (quote, i) => {
			// A post link quote is rendered as a hyperlink
			// and having nested hyperlinks will result in invalid HTML markup.
			// To prevent that, strip links from the quote.
			stripLinks(quote.content)
			// Separate quotes with new lines.
			if (quotes.length > 0) {
				quotes.push('\n')
			}
			quotes.push(quote)
		})
		if (quotesCount > 0) {
			content.content = quotes
			// Remove the combined quotes and "\n"s before them from post content.
			// Don't remove the "\n" after the last quote.
			contentParent.splice(index + 1, 1 + quotes.length)
		} else {
			// Autogenerate `post-link` quote text.
			if (generateQuotes) {
				setPostLinkQuote(content, quotedPost, options)
			}
		}
		return true
	}
	// Recurse into post parts.
	return setInReplyToQuotes(
		content.content,
		options,
		content,
		isFirstInParagraph,
		isLastInParagraph
	)
}

// Inline quotes can contain hyperlinks too. For example,
// `2ch.hk` autoparses links in comment text when it's submitted
// and if there's a quoted link then it will autoparse that link.
// Such nested links would result in a React warning:
// "validateDOMNesting(...): <a> cannot appear as a descendant of <a>.".
function stripLinks(content) {
	if (Array.isArray(content)) {
		let i = 0
		while (i < content.length) {
			if (typeof content[i] === 'object') {
				// Handling just a simple case here
				// and not recursing into nested arrays.
				if ((content[i].type === 'link' || content[i].type === 'post-link') &&
					typeof content[i].content === 'string') {
					content[i] = content[i].content
				}
			}
			i++
		}
	}
}

function setPostLinkQuote(postLink, post, options = {}) {
	const {
		messages,
		generatedQuoteMaxLength,
		generatedQuoteFitFactor
	} = options
	const text = generatePostQuote(post, {
		maxLength: generatedQuoteMaxLength || 180,
		// `fitFactor` could be `0`.
		fitFactor: generatedQuoteFitFactor === undefined ? 1.35 : generatedQuoteFitFactor,
		countNewLines: true,
		messages
	})
	if (text) {
		// Set `content.quote` to the quoted post text abstract.
		// Doesn't set `content.post` object to prevent JSON circular structure.
		// Compacts multiple paragraphs into multiple lines.
		postLink.content = [{
			type: 'quote',
			content: text,
			generated: true
		}]
	}
}

export function endsWithNewLineAndOptionalWhiteSpace(content, index, forward) {
	let nextIndex = index
	if (forward) {
		nextIndex++
		if (nextIndex === content.length) {
			return true
		}
	} else {
		nextIndex--
		if (nextIndex === -1) {
			return true
		}
	}
	if (content[nextIndex] === '\n') {
		return true
	}
	if (typeof content[nextIndex] === 'string') {
		if (WHITESPACE_REGEXP.test(content[nextIndex])) {
			return endsWithNewLineAndOptionalWhiteSpace(content, nextIndex, forward)
		}
	}
	return false
}

const WHITESPACE_REGEXP = /^\s$/